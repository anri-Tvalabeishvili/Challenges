from sympy import isprime
import time   #  შემოგვყავს ტაიმერი რათა დავითვალოთ გამოთვლაზე დახარჯული დრო
start = time.time()

""" 
    [37 36 35 34 33 32 31      თუ დავაკვირდებით მატრიცას მივხვდებით რომ, ჩვენი საძიებო რიცხვები გარკვეული თანამიმდევრობთაა დალაგებული
    38 17 16 15 14 13 30       მაგალითად პირველი 4 რიცხვისთვსი [3,5,7,9] თითოეულ რიცხვს შორის დაშორება არის delta = 2
    39 18  5  4  3 12 29       შემდეგი 4 რიცხვისთვის [13,17,21,25] თითოეულ რიცხვს შორის დაშორება არის delta = 4
    40 19  6  1  2 11 28       შემდეგი 4 რიცხვისთვის [31,37,43,49] თითოეულ რიცხვს შორის დაშორება არის delta = 6
    41 20  7  8  9 10 27
    42 21 22 23 24 25 26       ანუ მარტივი დასადგენია რომ ყოველი 4 რიცხვიანი ციკლის შემდეგ დაშორება რიცხვებს შორის იზრდება 2-ით
    43 44 45 46 47 48 49]
"""




matrix_side = 1   # შემოგვყავს ცვლადი რათა დავადგინოთ მატრიცის გვერდის სიგრძე ყოველი 4-რიცხვიანი ციკლის შემდგომ

counter = 0     # შემოგვაქვს ცვლადი რათა დავითვალოთ 4 რიცხვიანი ციკლი
delta = 2       # შემოგვაქვს ცვლადი რათა გამოვსახოთ ყოველი ციკლის შემდეგ რიცხვის ზრდა 2-ით
number = 1       # შემოგვაქვს საწყისი (ამთვლელი) რიცხვი


diagonal_numbers_Primes = []      # შემოგვყავს სია რათა შევინახოთ Prime რიცხვები, რომლებიც დიაგონალზე გვხვდება
diagonal_numbers_others = [1,]      # შემოგვყავს სია რათა შევინახოთ Prime-ს გარდა სხვა რიცხვები, რომლებიც დიაგონალზე გვხვდება



while True:
    
    number += delta
    counter += 1    


    if isprime(number):
        diagonal_numbers_Primes.append(number)
    else:
        diagonal_numbers_others.append(number)



    if counter == 4: 
        delta += 2      # ყოველი ციკლის შემდეგ delta-დაშორება რიცხვებს შორის იზრდება 2-ით
        counter = 0     # ვანულებთ მთვლელს რათა დავიდან შევძლოთ იგივეს გამეორება
        matrix_side += 2  # ყოველ ციკლზე მატრიცის გვერდის სიგრძე იზრდება 2-ით

        # თუ ციხკლი შესრულდა შესაბამისად გვაქვს ერთი სრული მატრიცა და შეგვიძლია შევამოწმოთ მისთვის დიაგონალის რიცხვებსა და დიაგონალის 
        # Prime-ებს შორის არსებული თანაფარდობა
        if len(diagonal_numbers_Primes) / (len(diagonal_numbers_Primes) + len(diagonal_numbers_others)) < 0.1:
            print(matrix_side)
            break


print("Calculation time:" , time.time() -start)     # ვპრინტავთ გამოთვალზე დახარჯულ დროს


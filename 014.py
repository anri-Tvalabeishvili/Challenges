import time   #  შემოგვყავს ტაიმერი რათა დავითვალოთ გამოთვლაზე დახარჯული დრო
start = time.time()

answer = {}     # ვქმნით დიქშინარის სადაც შევინახავთ ყველა რიცხვს თავისის ჭაჭვის სიგრძით

for new_number in range (1,1000000,2):      # ვიღებთ ყველა ციფრს 2-2 ის გამოტოვებით რადგან დიდი ალბათობით ყველაზე გრძელი ჯაჭვის მქონე ციფრო მთავრდება 3,5,7 ან 9-ზე
    number = new_number   # დროებით ვინახავთ სხვა ცვლადში რათა, მისი დაჭვის სიგრძესთან ერთად დავამატოთ დიქშინარიში
    chain = []          # ვქმნით ლისთს ჯაჭვისთვის რომელიც ყოველ ახალ ციფრზე ნულდება

    while int(new_number) != 1:     # ოპერაციას ვაგრძლებთ მანამ სანამ ჯაჭვის ბოლო წევრი არ გაუტოლდება 1-ს

        chain.append(new_number)      # თითოეულ ჯაჭვის ელემენტს ვამატებთ, ჯაჭვის სიაში რათა ბოლოს გავიგოთ რეოდენობა

        if new_number % 2 == 0:         # თუ რიცხვი იყოფა 2-ზე მაშინ გავყოთ და ხელახლა გავიმეორეოთ ციკლი სანამ ეს ციფრო არ გაუტოლდება 1-ს
            new_number = int(new_number / 2)
        else:                           # თუ არ იყოფა გავამრავლოთ 3-ზე და დავუმატოთ 1, ხელახლა გავიმეორეოთ ციკლი სანამ ეს ციფრო არ გაუტოლდება 1-ს
            new_number = int((new_number * 3 ) + 1)




    answer[str(number)] = len(chain) + 1    # იმის შემდეგ რაც ჯაჭვის ბოლო წევრი გაუტოლდება 1-ს, საწყის ციფრს მისივე დაჭვის სიგრძესთან ერთად ვაგდებთ დიქშინარიში
                                            # აქ ერთს იმიტო ვამატებთ, რომ ჯაჭვში ვერ ხერხდება ბოლო წევრის (1-ის)დამატება, ამიტომ ამ ჯაჭვის სიგრძეს აქ ვუმატებთ 1-ს
 
new_value = max(answer, key=answer.get)  # დიქშნარიდან ვიღებთ უდიდესი ჯაჭვის მქონე რიცხვის მნიშვნელობას
print("Highest value from dictionary: " + new_value)


print("Calculation time:" , time.time() -start)     # ვპრინტავთ გამოთვალზე დახარჯულ დროს